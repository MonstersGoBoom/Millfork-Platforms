// ..\millfork.exe -Xr -t pce main.mfk
// to build PCE rom

//	TODO 
//	add sprites
//	add input 
import PCEngine

void main() {
word z 
byte ticker

  PCE_init()

  VDC_reg(VDC_CR,0)
  VDC_reg(VDC_RCR,0)
  VDC_reg(VDC_BXR,0)
  VDC_reg(VDC_BYR,$0000)
  VDC_reg(VDC_MWR,0)
  VDC_reg(VDC_HSR,$0202)
  VDC_reg(VDC_HDR,$041f)
  VDC_reg(VDC_VPR,$0d07)
  VDC_reg(VDC_VDW,$00df)
  VDC_reg(VDC_VCR,$0003)
  VDC_reg(VDC_DCR,$0010)  

	VDC_upload8($0000,Tilemap.addr,Tilemap.length,0)
	VDC_upload($1000,Tiles.addr,Tiles.length)
	VDC_paletteupload(0,1,Palette)
  ticker = 0
	//	display on 
  VDC_reg(VDC_CR,VDP_IRQ_ENABLE | VDP_BG_ENABLE | VDP_SPR_ENABLE)
	enable_irq();



  z=0
  while(true)
  {
    z+=1
		WaitVSync();
		VDC_color_address_l = 0
 		VDC_color_address_h = 0
 		VDC_color_data=z;
  }
}
//	use 8 bit source and add attribute 
void VDC_upload8(word dest,pointer source,word size,byte attribute)
{
word z
  asm 
  {
    st0 #0
  }
  VDC_data_l = lo(dest)
  VDC_data_h = hi(dest)

  asm 
  {
    st0 #2
  }

  z=$4000
  size+=$4000
  while (z<size)
  {
    VDC_data_l = source[z]
    VDC_data_h = 0x01;
    z+=1
  }
}

segment(prgrom0)
{
//  const array tile_data 	= file("data/ruff_tiles.bin")
//  const array tile_colors = file("data/ruff_clut.bin")
	const array(word) Palette = [$000,$2111,$2222,$3333,$ffff,$2111,$2222,$3333,$ffff,$2111,$2222,$3333,$ffff]
	const array Tiles = [
		$FF, $00, $81, $00, $81, $00, $99, $00, $99, $00, $81, $00, $81, $00, $FF, $00,
		$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, 
		$00
	]
	const array Tilemap = [
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$01 ,$00 ,$00 ,$01 ,$00 ,$00 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$01 ,$00 ,$00 ,$01 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$01 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$01 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$01 ,$00 ,$00 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00,
	$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$01 ,$01 ,$01 ,$01 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00 ,$00

	]
  const array text = "hello prgrom0"z
}

segment(prgrom1)
{
  const array text1 = "hello prgrom1"z
}

segment(prgrom2)
{
  const array text2 = "hello prgrom2"z
}

segment(prgrom3)
{
  const array text3 = "hello prgrom3"z
}

